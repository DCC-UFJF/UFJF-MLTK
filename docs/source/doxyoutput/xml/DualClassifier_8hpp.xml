<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="DualClassifier_8hpp" kind="file" language="C++">
    <compoundname>DualClassifier.hpp</compoundname>
    <includes refid="Kernel_8hpp" local="yes">Kernel.hpp</includes>
    <includes refid="Classifier_8hpp" local="yes">Classifier.hpp</includes>
    <includes local="no">vector</includes>
    <includedby refid="IMA_8hpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/IMA.hpp</includedby>
    <includedby refid="Perceptron_8hpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/Perceptron.hpp</includedby>
    <includedby refid="SMO_8hpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp</includedby>
    <includedby refid="Validation_8cpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Validation/src/Validation.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>Kernel.hpp</label>
        <link refid="Kernel_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>iterator</label>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="14">
        <label>Point.hpp</label>
        <link refid="Point_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="18">
        <label>Classifier.hpp</label>
        <link refid="Classifier_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="13">
        <label>fstream</label>
      </node>
      <node id="20">
        <label>Solution.hpp</label>
        <link refid="Solution_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Statistics.hpp</label>
        <link refid="Statistics_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>cstdio</label>
      </node>
      <node id="23">
        <label>ctime</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="11">
        <label>sstream</label>
      </node>
      <node id="15">
        <label>Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/DualClassifier.hpp</label>
        <link refid="DualClassifier_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Timer.hpp</label>
        <link refid="Timer_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="19">
        <label>Learner.hpp</label>
        <link refid="Learner_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Ensemble/src/PrimalPercCommittee.hpp</label>
        <link refid="PrimalPercCommittee_8hpp_source"/>
      </node>
      <node id="5">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp</label>
        <link refid="SMO_8hpp_source"/>
      </node>
      <node id="2">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/IMA.hpp</label>
        <link refid="IMA_8hpp"/>
      </node>
      <node id="1">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/DualClassifier.hpp</label>
        <link refid="DualClassifier_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/Perceptron.hpp</label>
        <link refid="Perceptron_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classDualClassifier" prot="public">DualClassifier</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classDualClassifier" kindref="compound">DualClassifier</ref> base class.</para>
<para><simplesect kind="author"><para>Mateus Coutinho Marim </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>DUALCLASSIFIER__HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUALCLASSIFIER__HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Kernel_8hpp" kindref="compound">Kernel.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Classifier_8hpp" kindref="compound">Classifier.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="14" refid="classDualClassifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classDualClassifier" kindref="compound">DualClassifier</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classClassifier" kindref="compound">Classifier</ref>&lt;<sp/>T<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Associations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="19" refid="classDualClassifier_1a204d0e925be1450c97dd8635b8c9f3e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classDualClassifier_1a204d0e925be1450c97dd8635b8c9f3e9" kindref="member">alpha</ref>;</highlight></codeline>
<codeline lineno="21" refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKernel" kindref="compound">Kernel</ref><sp/>*<ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classDualClassifier_1a4db588ff3339bb016cdabf7eb27b576f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1a4db588ff3339bb016cdabf7eb27b576f" kindref="member">evaluate</ref>(<ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>p)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>func,<sp/>bias<sp/>=<sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1ac0a589a77d238aecf14c91f55d1b8daa" kindref="member">bias</ref>,<sp/>fk<sp/>=<sp/>0.0,<sp/>lambda;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getSize(),<sp/>dim<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getDim(),<sp/>r;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>po<sp/>=<sp/>std::make_shared&lt;Point&lt;<sp/>T<sp/>&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p.<ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref>.size()<sp/>!=<sp/>dim){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>point<sp/>must<sp/>have<sp/>the<sp/>same<sp/>dimension<sp/>of<sp/>the<sp/>feature<sp/>set!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(func<sp/>=<sp/>bias,<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fk<sp/>=<sp/>this-&gt;kernel-&gt;<ref refid="classKernel_1ae7ecba4a0a702141eba9ff29e24ea236" kindref="member">function</ref>(po,<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[r],<sp/>dim);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/><sp/>+=<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[r]-&gt;<ref refid="classDualClassifier_1a204d0e925be1450c97dd8635b8c9f3e9" kindref="member">alpha</ref><sp/>*<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[r]-&gt;y<sp/>*<sp/>fk;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(func<sp/>&gt;=<sp/>0)?1:-1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/*********************************************</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Setters<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classDualClassifier_1a4f4cc830f9f9723592dc92957aec5d48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1a4f4cc830f9f9723592dc92957aec5d48" kindref="member">setKernel</ref>(<ref refid="classKernel" kindref="compound">Kernel</ref><sp/>*K){<sp/>this-&gt;kernel<sp/>=<sp/>K;<sp/>}</highlight></codeline>
<codeline lineno="55" refid="classDualClassifier_1abe138aa8f388a11475773155961911be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1abe138aa8f388a11475773155961911be" kindref="member">setKernelType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type){<sp/><ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref>-&gt;<ref refid="classKernel_1ad01e209470accf44ea240078f39fb127" kindref="member">setType</ref>(type);<sp/>}</highlight></codeline>
<codeline lineno="60" refid="classDualClassifier_1a1eaa47dfe556a9c0ecb05cd82324c337" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1a1eaa47dfe556a9c0ecb05cd82324c337" kindref="member">setKernelParam</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>param){<sp/><ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref>-&gt;<ref refid="classKernel_1a60d2e4be6d2d2619377e677021178aa4" kindref="member">setParam</ref>(param);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/*********************************************</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Getters<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classDualClassifier_1a85d9b58aabf399c4d5beb5250a926a64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classDualClassifier_1a85d9b58aabf399c4d5beb5250a926a64" kindref="member">getFormulationString</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Dual&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classDualClassifier_1ad5cc383587a3388bfc370879d76b8cf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1ad5cc383587a3388bfc370879d76b8cf6" kindref="member">getKernelParam</ref>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref>-&gt;<ref refid="classKernel_1a838e2cc5018fa702e59c52a3bf8ef813" kindref="member">getParam</ref>();<sp/>}</highlight></codeline>
<codeline lineno="77" refid="classDualClassifier_1ae15bdcaa9b46e1084aa2df7170a0217f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1ae15bdcaa9b46e1084aa2df7170a0217f" kindref="member">getKernelType</ref>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref>-&gt;<ref refid="classKernel_1a5a2cb0fce0eda6c67a2325f6c8958da8" kindref="member">getType</ref>();<sp/>}</highlight></codeline>
<codeline lineno="82" refid="classDualClassifier_1a9ce7228ddbdf6886782e2d1abf9bb0a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/><ref refid="classDualClassifier_1a9ce7228ddbdf6886782e2d1abf9bb0a9" kindref="member">getAlphaVector</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier_1a204d0e925be1450c97dd8635b8c9f3e9" kindref="member">alpha</ref>;<sp/>}</highlight></codeline>
<codeline lineno="87" refid="classDualClassifier_1ae4e8931fb65d75009b9c92ae5c30c6b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classDualClassifier_1ae4e8931fb65d75009b9c92ae5c30c6b2" kindref="member">getWeight</ref>(){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>dim<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getDim(),<sp/>size<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getSize();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>w(dim);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>j++){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[i]<sp/>+=<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[j]-&gt;<ref refid="classDualClassifier_1a204d0e925be1450c97dd8635b8c9f3e9" kindref="member">alpha</ref>*(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[j]-&gt;y*(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[j]-&gt;x[i];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103" refid="classDualClassifier_1a179729f872fe280d752089c571187fbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classDualClassifier_1a179729f872fe280d752089c571187fbf" kindref="member">getDualWeight</ref>(){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0,<sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getSize(),<sp/>dim<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getDim();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dMatrix<sp/>*H,<sp/>*Hk,<sp/>matrixdif(size,<sp/>std::vector&lt;double&gt;(size));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>alphaaux(size);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>=<sp/><ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref>-&gt;<ref refid="classKernel_1a126dcd1fa57f69af243ca678170288b6" kindref="member">generateMatrixH</ref>(this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>.resize(dim);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>dim;<sp/>++k)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hk<sp/>=<sp/><ref refid="classDualClassifier_1a40c32ed2991c8545d50ef5fe57611c28" kindref="member">kernel</ref>-&gt;<ref refid="classKernel_1a32f8639c734692862062817efaeead64" kindref="member">generateMatrixHwithoutDim</ref>(this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>,<sp/>k);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>++j)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrixdif[i][j]<sp/>=<sp/>(*H)[i][j]<sp/>-<sp/>(*Hk)[i][j];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(alphaaux[i]<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>++j)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaaux[i]<sp/>+=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getPoint(j)-&gt;alpha<sp/>*<sp/>matrixdif[i][j];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>[k]<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>[k]<sp/>+=<sp/>alphaaux[i]<sp/>*<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getPoint(i)-&gt;alpha;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135" refid="classDualClassifier_1a2780174d195acdfc2d3c9777c48e818c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classDualClassifier_1a2780174d195acdfc2d3c9777c48e818c" kindref="member">getDualWeightProdInt</ref>(){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0,<sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getSize(),<sp/>dim<sp/>=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getDim();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>alphaaux(size);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dMatrix<sp/>H(size,<sp/>std::vector&lt;double&gt;(size));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>.resize(dim);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>dim;<sp/>++k)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>++j)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H[i][j]<sp/>=<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[i]-&gt;x[k]<sp/>*<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[j]-&gt;x[k]</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[i]-&gt;y<sp/>*<sp/>(*this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>)[j]-&gt;y;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="classLearner_1ae16fcef6dec8ef7bff3fad12ea383622" kindref="member">verbose</ref><sp/>&gt;=<sp/>3)<sp/>std::clog<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/>H<sp/>matrix<sp/>without<sp/>dim<sp/>generated.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(alphaaux[i]<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>size;<sp/>++j)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alphaaux[i]<sp/>+=<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getPoint(j)-&gt;alpha<sp/>*<sp/>H[i][j];</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>[k]<sp/>=<sp/>0,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>[k]<sp/>+=<sp/>alphaaux[i]<sp/>*<sp/>this-&gt;<ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref>-&gt;getPoint(i)-&gt;alpha;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classClassifier_1adecdc97505c2911a66e240ad0fefd9ea" kindref="member">solution</ref>.<ref refid="classSolution_1a736054c66aab1014bba4a71de293ad2f" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/DualClassifier.hpp"/>
  </compounddef>
</doxygen>
