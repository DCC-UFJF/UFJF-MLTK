<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="IMA_8hpp" kind="file" language="C++">
    <compoundname>IMA.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes refid="PrimalClassifier_8hpp" local="yes">PrimalClassifier.hpp</includes>
    <includes refid="DualClassifier_8hpp" local="yes">DualClassifier.hpp</includes>
    <includes refid="MLToolkit_8hpp" local="yes">MLToolkit.hpp</includes>
    <includedby refid="IMA_8cpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/src/IMA.cpp</includedby>
    <incdepgraph>
      <node id="7">
        <label>Kernel.hpp</label>
        <link refid="Kernel_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>MLToolkit.hpp</label>
        <link refid="MLToolkit_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cmath</label>
      </node>
      <node id="18">
        <label>Point.hpp</label>
        <link refid="Point_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>numeric</label>
      </node>
      <node id="4">
        <label>Classifier.hpp</label>
        <link refid="Classifier_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="3">
        <label>PrimalClassifier.hpp</label>
        <link refid="PrimalClassifier_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>fstream</label>
      </node>
      <node id="6">
        <label>Solution.hpp</label>
        <link refid="Solution_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Statistics.hpp</label>
        <link refid="Statistics_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cstdio</label>
      </node>
      <node id="24">
        <label>ctime</label>
      </node>
      <node id="1">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/IMA.hpp</label>
        <link refid="IMA_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="19">
        <label>Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>DualClassifier.hpp</label>
        <link refid="DualClassifier_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Timer.hpp</label>
        <link refid="Timer_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="5">
        <label>Learner.hpp</label>
        <link refid="Learner_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="11">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classIMAp" prot="public">IMAp</innerclass>
    <innerclass refid="classIMApFixedMargin" prot="public">IMApFixedMargin</innerclass>
    <innerclass refid="classIMADual" prot="public">IMADual</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Incremental Margin Algorithm implementations</para>
<para><simplesect kind="author"><para>Mateus Coutinho Marim </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>mateus558<sp/>on<sp/>01/08/17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLASSIFICATION_ALGORITHMS_SYSTEM_IMA_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLASSIFICATION_ALGORITHMS_SYSTEM_IMA_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="PrimalClassifier_8hpp" kindref="compound">PrimalClassifier.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="DualClassifier_8hpp" kindref="compound">DualClassifier.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MLToolkit_8hpp" kindref="compound">MLToolkit.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="22" refid="classIMAp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIMAp" kindref="compound">IMAp</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPrimalClassifier" kindref="compound">PrimalClassifier</ref>&lt;<sp/>T<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>svs;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classIMAp" kindref="compound">IMAp</ref>(std::shared_ptr&lt;<ref refid="classData" kindref="compound">Data&lt; T &gt;</ref><sp/>&gt;<sp/><ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin<sp/>=<sp/>0.0,<sp/><ref refid="classSolution" kindref="compound">Solution</ref><sp/>*initial_solution<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIMAp_1aa8bf6b0d21a76d388fe81ee516b627e4" kindref="member">train</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classIMAp_1a41b0739cdc486e3f21e7927f1ad429a8" kindref="member">evaluate</ref>(<ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/><sp/>p)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37" refid="classIMAp_1a87adda768f1c48c0e4fcdf66f3145ae9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classIMAp_1a87adda768f1c48c0e4fcdf66f3145ae9" kindref="member">getSupportVectors</ref>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>svs;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="44" refid="classIMApFixedMargin" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIMApFixedMargin" kindref="compound">IMApFixedMargin</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classPrimalClassifier" kindref="compound">PrimalClassifier</ref>&lt;<sp/>T<sp/>&gt;<sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>maiorn<sp/>=<sp/>0,<sp/>flagNao1aDim;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin<sp/>=<sp/>0.0,<sp/>maiorw<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tMax;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>svs;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classIMApFixedMargin" kindref="compound">IMApFixedMargin</ref>(std::shared_ptr&lt;<ref refid="classData" kindref="compound">Data&lt; T &gt;</ref><sp/>&gt;<sp/><ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classClassifier_1ae7598910eeb47894579ca29718c9fa9c" kindref="member">gamma</ref><sp/>=<sp/>0,<sp/><ref refid="classSolution" kindref="compound">Solution</ref><sp/>*initial_solution<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIMApFixedMargin_1a4d99742be5fe5a21b8ae6f99547a98c8" kindref="member">train</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classIMApFixedMargin_1a909eb58c78c20780494598b478f8846f" kindref="member">evaluate</ref>(<ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/><sp/>p)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>getFlagNot1aDim()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;flagNao1aDim;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>gettMax(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;tMax;<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="63" refid="classIMADual" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIMADual" kindref="compound">IMADual</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier" kindref="compound">DualClassifier</ref>&lt;<sp/>T<sp/>&gt;<sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>svs;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classIMADual" kindref="compound">IMADual</ref>(std::shared_ptr&lt;<ref refid="classData" kindref="compound">Data&lt; T &gt;</ref><sp/>&gt;<sp/><ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classKernel" kindref="compound">Kernel</ref><sp/>*k<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classLearner_1a6192264b814185c1b415f3dfb3b0a4f6" kindref="member">rate</ref><sp/>=<sp/>1,<sp/><ref refid="classSolution" kindref="compound">Solution</ref><sp/>*initial_solution<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIMADual_1aff820af6454ceeef4d23af48476d7218" kindref="member">train</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75" refid="classIMADual_1aa8e4e1d6e34c2e67d752c6b5f111ce35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="classIMADual_1aa8e4e1d6e34c2e67d752c6b5f111ce35" kindref="member">getSupportVectors</ref>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>svs;<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//CLASSIFICATION_ALGORITHMS_SYSTEM_IMAP_HPP</highlight></codeline>
    </programlisting>
    <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/IMA.hpp"/>
  </compounddef>
</doxygen>
