<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="Point_8hpp" kind="file" language="C++">
    <compoundname>Point.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">cmath</includes>
    <includes refid="Utils_8hpp" local="yes">Utils.hpp</includes>
    <includedby refid="Data_8hpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Data.hpp</includedby>
    <includedby refid="Statistics_8hpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Statistics.hpp</includedby>
    <includedby refid="MLToolkit_8hpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/MLToolkit.hpp</includedby>
    <includedby refid="Validation_8cpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Validation/src/Validation.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>iterator</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="1">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Point.hpp</label>
        <link refid="Point_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="26">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Ensemble/src/PrimalCommittee.hpp</label>
        <link refid="PrimalCommittee_8hpp_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/FeatureSelection/include/Golub.hpp</label>
        <link refid="Golub_8hpp_source"/>
      </node>
      <node id="16">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/OneVsAll.hpp</label>
        <link refid="OneVsAll_8hpp_source"/>
      </node>
      <node id="8">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp</label>
        <link refid="Kernel_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Ensemble/src/Ensemble.hpp</label>
        <link refid="Ensemble_8hpp_source"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Regressor/include/LMS.hpp</label>
        <link refid="LMS_8hpp_source"/>
      </node>
      <node id="24">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Clusterer/include/KMeans.hpp</label>
        <link refid="KMeans_8hpp_source"/>
      </node>
      <node id="4">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/MLToolkit.hpp</label>
        <link refid="MLToolkit_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Point.hpp</label>
        <link refid="Point_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/FeatureSelection/include/AOS.hpp</label>
        <link refid="AOS_8hpp_source"/>
      </node>
      <node id="13">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/Classifier.hpp</label>
        <link refid="Classifier_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Regressor/include/KNNRegressor.hpp</label>
        <link refid="KNNRegressor_8hpp_source"/>
      </node>
      <node id="7">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Ensemble/src/PrimalPercCommittee.hpp</label>
        <link refid="PrimalPercCommittee_8hpp_source"/>
      </node>
      <node id="14">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/PrimalClassifier.hpp</label>
        <link refid="PrimalClassifier_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp</label>
        <link refid="SMO_8hpp_source"/>
      </node>
      <node id="11">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Solution.hpp</label>
        <link refid="Solution_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Statistics.hpp</label>
        <link refid="Statistics_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Data.cpp</label>
        <link refid="Data_8cpp"/>
      </node>
      <node id="19">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/FeatureSelection/include/Fisher.hpp</label>
        <link refid="Fisher_8hpp_source"/>
      </node>
      <node id="17">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/FeatureSelection/include/FeatureSelection.hpp</label>
        <link refid="FeatureSelection_8hpp_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/IMA.hpp</label>
        <link refid="IMA_8hpp"/>
      </node>
      <node id="15">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/KNN.hpp</label>
        <link refid="KNN_8hpp_source"/>
      </node>
      <node id="9">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/DualClassifier.hpp</label>
        <link refid="DualClassifier_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Regressor/include/DualRegressor.hpp</label>
        <link refid="DualRegressor_8hpp_source"/>
      </node>
      <node id="21">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/FeatureSelection/include/RFE.hpp</label>
        <link refid="RFE_8hpp_source"/>
      </node>
      <node id="27">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Regressor/include/Regressor.hpp</label>
        <link refid="Regressor_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Clusterer/include/Clusterer.hpp</label>
        <link refid="Clusterer_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Regressor/include/PrimalRegressor.hpp</label>
        <link refid="PrimalRegressor_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Visualize/include/Visualization.hpp</label>
        <link refid="Visualization_8hpp"/>
      </node>
      <node id="6">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/Perceptron.hpp</label>
        <link refid="Perceptron_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Learner.hpp</label>
        <link refid="Learner_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Validation/include/Validation.hpp</label>
        <link refid="Validation_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classPoint" prot="public">Point</innerclass>
    <innerclass refid="classPoint" prot="public">Point</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="Point_8hpp_1a564df17cacf8f33717f80004503b3aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;output, const Point&lt; T &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const <ref refid="classPoint" kindref="compound">Point</ref>&lt; T &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Point.hpp" line="115" column="1" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Point.hpp" bodystart="115" bodyend="125" declfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Point.hpp" declline="20" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classPoint" kindref="compound">Point</ref> manipulation class</para>
<para><simplesect kind="author"><para>Mateus Coutinho Marim </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>POINT__HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POINT__HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Utils_8hpp" kindref="compound">Utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classPoint" refkind="compound"><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPoint" kindref="compound">Point</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/>std::ostream<sp/>&amp;operator&lt;&lt;(<sp/>std::ostream<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;p<sp/>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPoint" kindref="compound">Point</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">public<sp/>:</highlight></codeline>
<codeline lineno="27" refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>T<sp/>&gt;<sp/><ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="29" refid="classPoint_1abd1a56102bc430eb08fc37dac9aa4c0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPoint_1abd1a56102bc430eb08fc37dac9aa4c0b" kindref="member">y</ref><sp/>=<sp/>0,<sp/>alpha<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="31" refid="classPoint_1af7d6dfc3296421e9f10311d29720aa3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>T<sp/>val<sp/>=<sp/>T(),<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(std::vector&lt;T&gt;<sp/>_x);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPoint_1ab1a74677723b3774be565d88af2187f8" kindref="member">dot</ref><sp/>(std::vector&lt;<sp/>T<sp/>&gt;<sp/>p);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPoint_1a399e38f00c2bb383ba6291b2318e7207" kindref="member">norm</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>2);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/**********************************************</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>Overloaded<sp/>operators<sp/>for<sp/>the<sp/>Point<sp/>class.<sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>**********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;operator&lt;&lt;<sp/>&lt;&gt;(<sp/>std::ostream<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;p<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref>[i];}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;<sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref>[i];}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classPoint" kindref="compound">Point</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="classPoint" kindref="compound">Point&lt; T &gt;::Point</ref>(){}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="classPoint" kindref="compound">Point&lt; T &gt;::Point</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>T<sp/>val,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>x.resize(dim,<sp/>val);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="classPoint" kindref="compound">Point&lt; T &gt;::Point</ref>(std::vector&lt;T&gt;<sp/>_x){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>_x;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="82" refid="classPoint_1ab1a74677723b3774be565d88af2187f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPoint_1ab1a74677723b3774be565d88af2187f8" kindref="member">Point&lt; T &gt;::dot</ref>(std::vector&lt;<sp/>T<sp/>&gt;<sp/>p){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>dim<sp/>=<sp/>p.size();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dot;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim<sp/>!=<sp/>x.size()){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>Points<sp/>must<sp/>have<sp/>the<sp/>same<sp/>dimension!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0,<sp/>dot<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dot<sp/>+=<sp/>p[i]<sp/>*<sp/>x[i];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dot;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="99" refid="classPoint_1a399e38f00c2bb383ba6291b2318e7207" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classPoint_1a399e38f00c2bb383ba6291b2318e7207" kindref="member">Point&lt; T &gt;::norm</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>dim<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>==<sp/>NormType::NORM_LINF){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxAbsElement(x);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0,<sp/>norm<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>pow(fabs(x[i]),<sp/>p);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pow(norm,<sp/>1.0/p);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">std::ostream<sp/>&amp;operator&lt;&lt;(<sp/>std::ostream<sp/>&amp;output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;p<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>dim<sp/>=<sp/>p.<ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref>.size();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>&lt;&lt;<sp/>p.<ref refid="classPoint_1af7d6dfc3296421e9f10311d29720aa3b" kindref="member">id</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i){</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>&lt;&lt;<sp/>p.<ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref>[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>&lt;&lt;<sp/>p.<ref refid="classPoint_1abd1a56102bc430eb08fc37dac9aa4c0b" kindref="member">y</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="classPoint" kindref="compound">Point&lt; T &gt;::~Point</ref>(){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;::operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>==<sp/>rhs.<ref refid="classPoint_1a8b8cc26f89935fdc83ed464c053c0476" kindref="member">x</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>==<sp/>rhs.<ref refid="classPoint_1abd1a56102bc430eb08fc37dac9aa4c0b" kindref="member">y</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>==<sp/>rhs.alpha<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>rhs.<ref refid="classPoint_1af7d6dfc3296421e9f10311d29720aa3b" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;::operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point&lt; T &gt;</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(rhs<sp/>==<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Point.hpp"/>
  </compounddef>
</doxygen>
