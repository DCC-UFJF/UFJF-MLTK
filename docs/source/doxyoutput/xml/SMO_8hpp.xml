<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="SMO_8hpp" kind="file" language="C++">
    <compoundname>SMO.hpp</compoundname>
    <includes refid="DualClassifier_8hpp" local="yes">DualClassifier.hpp</includes>
    <includes local="no">list</includes>
    <includedby refid="SMO_8cpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/src/SMO.cpp</includedby>
    <includedby refid="AOS_8cpp" local="yes">/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/FeatureSelection/src/AOS.cpp</includedby>
    <incdepgraph>
      <node id="25">
        <label>list</label>
      </node>
      <node id="3">
        <label>Kernel.hpp</label>
        <link refid="Kernel_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>Point.hpp</label>
        <link refid="Point_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>numeric</label>
      </node>
      <node id="19">
        <label>Classifier.hpp</label>
        <link refid="Classifier_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="1">
        <label>/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp</label>
        <link refid="SMO_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Solution.hpp</label>
        <link refid="Solution_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Statistics.hpp</label>
        <link refid="Statistics_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>cstdio</label>
      </node>
      <node id="24">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="7">
        <label>utility</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="16">
        <label>Utils.hpp</label>
        <link refid="Utils_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>DualClassifier.hpp</label>
        <link refid="DualClassifier_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Timer.hpp</label>
        <link refid="Timer_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>Learner.hpp</label>
        <link refid="Learner_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="8">
        <label>Data.hpp</label>
        <link refid="Data_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structint__dll" prot="public">int_dll</innerclass>
    <innerclass refid="classSMO" prot="public">SMO</innerclass>
    <innerclass refid="structSMO_1_1smo__learning__data" prot="private">SMO::smo_learning_data</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="SMO_8hpp_1a80b651b2814c6e1b6b97056be0ddaf7a" prot="public" static="no">
        <type>struct <ref refid="structint__dll" kindref="compound">int_dll</ref></type>
        <definition>typedef struct int_dll int_dll</definition>
        <argsstring></argsstring>
        <name>int_dll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp" line="1" column="0" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Mateus<sp/>Coutinho<sp/>Marim<sp/>on<sp/>7/28/2018.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>SMO<sp/>classifier<sp/>lib<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*****************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UFJF_MLTK_SMO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UFJF_MLTK_SMO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="DualClassifier_8hpp" kindref="compound">DualClassifier.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*double<sp/>linked<sp/>list<sp/>of<sp/>integers*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structint__dll" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structint__dll" kindref="compound">int_dll</ref></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>*prev<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>*next<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref>();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref>*<sp/>remove(<ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>**node);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref>*<sp/>append(<ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>*list);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free(<ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>**head);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structint__dll" kindref="compound">int_dll</ref><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;</highlight></codeline>
<codeline lineno="30" refid="classSMO" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSMO" kindref="compound">SMO</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classDualClassifier" kindref="compound">DualClassifier</ref><sp/>&lt;<sp/>T<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">smo_learning_data</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>*sv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smo_learning_data(){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sv<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>9999;<sp/></highlight><highlight class="comment">//0.05</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>TOL<sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;smo_learning_data&gt;<sp/>l_data;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structint__dll" kindref="compound">int_dll</ref><sp/>*head<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>examine_example(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>max_errors(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>iterate_non_bound(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>iterate_all_set(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>take_step(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>training_routine();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_learning();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>train_matrix(<ref refid="classKernel" kindref="compound">Kernel</ref><sp/>*matrix);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classSMO" kindref="compound">SMO</ref>(std::shared_ptr&lt;<ref refid="classData" kindref="compound">Data&lt; T &gt;</ref><sp/>&gt;<sp/><ref refid="classLearner_1af4a6ca1441fca4f90d6112beaa01e5de" kindref="member">samples</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classKernel" kindref="compound">Kernel</ref><sp/>*k<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classLearner_1ae16fcef6dec8ef7bff3fad12ea383622" kindref="member">verbose</ref><sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSMO_1af786da7154d3025293875a43faca8819" kindref="member">train</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classSMO" kindref="compound">SMO</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//UFJF_MLTK_SMO_H</highlight></codeline>
    </programlisting>
    <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Classifier/include/SMO.hpp"/>
  </compounddef>
</doxygen>
