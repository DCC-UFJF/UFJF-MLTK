<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="classKernel" kind="class" language="C++" prot="public">
    <compoundname>Kernel</compoundname>
    <includes refid="Kernel_8hpp" local="no">Kernel.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classKernel_1a36e782d6feb496fc25d252756b87c3d4" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Kernel::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <initializer>{}</initializer>
        <briefdescription>
<para><ref refid="classKernel" kindref="compound">Kernel</ref> type and parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="24" column="9" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKernel_1a7d5d259c98d94fa0a51d628144874135" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double Kernel::param</definition>
        <argsstring></argsstring>
        <name>param</name>
        <initializer>{}</initializer>
        <briefdescription>
<para><ref refid="classKernel" kindref="compound">Kernel</ref> parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="26" column="12" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKernel_1aab3d0d8ccef388d4ab78a8c5c93b1654" prot="private" static="no" mutable="no">
        <type>dMatrix</type>
        <definition>dMatrix Kernel::K</definition>
        <argsstring></argsstring>
        <name>K</name>
        <briefdescription>
<para><ref refid="classKernel" kindref="compound">Kernel</ref> matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="28" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKernel_1a5f3eedf60637a672575c5c8623792481" prot="private" static="no" mutable="no">
        <type>dMatrix</type>
        <definition>dMatrix Kernel::H</definition>
        <argsstring></argsstring>
        <name>H</name>
        <briefdescription>
<para>H matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="30" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKernel_1a6d2913d400e9ae537cf31ef56f58686e" prot="private" static="no" mutable="no">
        <type>dMatrix</type>
        <definition>dMatrix Kernel::HwithoutDim</definition>
        <argsstring></argsstring>
        <name>HwithoutDim</name>
        <briefdescription>
<para>H matrix without a dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="32" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKernel_1ae60e072c58cdc16842a239bdd0761590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Kernel::Kernel</definition>
        <argsstring>(int type=0, double param=0)</argsstring>
        <name>Kernel</name>
        <param>
          <type>int</type>
          <declname>type</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="37" column="5" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="7" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a4dc45b11849fada00d52060cee27730b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dMatrix *</type>
        <definition>dMatrix * Kernel::getKernelMatrixPointer</definition>
        <argsstring>()</argsstring>
        <name>getKernelMatrixPointer</name>
        <briefdescription>
<para>getKernelMatrixPointer Returns a reference to the kernel matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>dMatrix* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="42" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1adf23c1567adb8ddb5757931587320871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Kernel::Kernel</definition>
        <argsstring>(dMatrix kernel_matrix)</argsstring>
        <name>Kernel</name>
        <param>
          <type>dMatrix</type>
          <declname>kernel_matrix</declname>
        </param>
        <briefdescription>
<para>Class constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classKernel" kindref="compound">Kernel</ref> matrix to be set in initialization. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="47" column="5" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1ad01e209470accf44ea240078f39fb127" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kernel::setType</definition>
        <argsstring>(int type)</argsstring>
        <name>setType</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>setType Set the kernel type used in the kernel computations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classKernel" kindref="compound">Kernel</ref> type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="52" column="10" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a60d2e4be6d2d2619377e677021178aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kernel::setParam</definition>
        <argsstring>(double param)</argsstring>
        <name>setParam</name>
        <param>
          <type>double</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>setParam Set the kernel parameter used in the kernel computations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="57" column="10" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a5a2cb0fce0eda6c67a2325f6c8958da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Kernel::getType</definition>
        <argsstring>()</argsstring>
        <name>getType</name>
        <briefdescription>
<para>getType Returns the kernel type used in the kernel computations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="62" column="9" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a838e2cc5018fa702e59c52a3bf8ef813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Kernel::getParam</definition>
        <argsstring>()</argsstring>
        <name>getParam</name>
        <briefdescription>
<para>getParam Returns the kernel parameter used in the kernel computations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="67" column="12" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a3801cee0d86f25f1500d202f43a84b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Kernel::setKernelMatrix</definition>
        <argsstring>(dMatrix K)</argsstring>
        <name>setKernelMatrix</name>
        <param>
          <type>dMatrix</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>setKernelMatrix Set a pre computed kernel matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classKernel" kindref="compound">Kernel</ref> matrix to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="72" column="10" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a5e398c63fee5f0e30b6dfb735c75e41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dMatrix</type>
        <definition>dMatrix Kernel::getKernelMatrix</definition>
        <argsstring>()</argsstring>
        <name>getKernelMatrix</name>
        <briefdescription>
<para>getKernelMatrix Get the kernel matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::vector&lt;double&gt; &gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="77" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/src/Kernel.cpp" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a214aeb35c89e67cf7677c61f7b0a843f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Kernel::compute</definition>
        <argsstring>(std::shared_ptr&lt; Data&lt; T &gt; &gt; samples)</argsstring>
        <name>compute</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classData" kindref="compound">Data</ref>&lt; T &gt; &gt;</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>compute Compute the kernel matrix with the given type and parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classData" kindref="compound">Data</ref> used to compute the kernel matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="83" column="10" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="135" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a126dcd1fa57f69af243ca678170288b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>dMatrix *</type>
        <definition>dMatrix * Kernel::generateMatrixH</definition>
        <argsstring>(std::shared_ptr&lt; Data&lt; T &gt; &gt; samples)</argsstring>
        <name>generateMatrixH</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classData" kindref="compound">Data</ref>&lt; T &gt; &gt;</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>compute Compute the H matrix with the computed kernel matrix and given samples. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classData" kindref="compound">Data</ref> used to compute the kernel matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dMatrix* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="90" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="150" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a32f8639c734692862062817efaeead64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>dMatrix *</type>
        <definition>dMatrix * Kernel::generateMatrixHwithoutDim</definition>
        <argsstring>(std::shared_ptr&lt; Data&lt; T &gt; &gt; samples, int dim)</argsstring>
        <name>generateMatrixHwithoutDim</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classData" kindref="compound">Data</ref>&lt; T &gt; &gt;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>compute Compute the H matrix without a dimension, with the computed kernel matrix and given samples. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classData" kindref="compound">Data</ref> used to compute the kernel matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension to be ignored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dMatrix* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="98" column="13" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="169" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1ae7ecba4a0a702141eba9ff29e24ea236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Kernel::function</definition>
        <argsstring>(std::shared_ptr&lt; Point&lt; T &gt; &gt; one, std::shared_ptr&lt; Point&lt; T &gt; &gt; two, int dim)</argsstring>
        <name>function</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classPoint" kindref="compound">Point</ref>&lt; T &gt; &gt;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classPoint" kindref="compound">Point</ref>&lt; T &gt; &gt;</type>
          <declname>two</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>function Compute the kernel function between two points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>one</parametername>
</parameternamelist>
<parameterdescription>
<para>first point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>two</parametername>
</parameternamelist>
<parameterdescription>
<para>second point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the points. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="107" column="12" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="188" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1aae7563927691a73b6f20b0194087c035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Kernel::functionWithoutDim</definition>
        <argsstring>(std::shared_ptr&lt; Point&lt; T &gt; &gt; one, std::shared_ptr&lt; Point&lt; T &gt; &gt; two, int j, int dim)</argsstring>
        <name>functionWithoutDim</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classPoint" kindref="compound">Point</ref>&lt; T &gt; &gt;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classPoint" kindref="compound">Point</ref>&lt; T &gt; &gt;</type>
          <declname>two</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>function Compute the kernel function between two points without a dimension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>one</parametername>
</parameternamelist>
<parameterdescription>
<para>first point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>two</parametername>
</parameternamelist>
<parameterdescription>
<para>second point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension to be ignored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the points. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="117" column="12" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="223" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a686e3cd96a93d7742226dedd5beb9da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Kernel::norm</definition>
        <argsstring>(Data&lt; T &gt; data)</argsstring>
        <name>norm</name>
        <param>
          <type><ref refid="classData" kindref="compound">Data</ref>&lt; T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>norm Computes norm in dual variables. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to compute norm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="124" column="12" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="255" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classKernel_1a3f9176d4d29d272923b07f2f817e398a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Kernel::featureSpaceNorm</definition>
        <argsstring>(std::shared_ptr&lt; Data&lt; T &gt; &gt; data)</argsstring>
        <name>featureSpaceNorm</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classData" kindref="compound">Data</ref>&lt; T &gt; &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>featureSpaceNorm Computes the norm in the feature space (Dual). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to compute norm. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="131" column="12" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="273" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for the kernel computations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" line="20" column="1" bodyfile="/home/mateuscmarim/Repositories/UFJF-MLTK/Modules/Core/include/Kernel.hpp" bodystart="20" bodyend="132"/>
    <listofallmembers>
      <member refid="classKernel_1a214aeb35c89e67cf7677c61f7b0a843f" prot="public" virt="non-virtual"><scope>Kernel</scope><name>compute</name></member>
      <member refid="classKernel_1a3f9176d4d29d272923b07f2f817e398a" prot="public" virt="non-virtual"><scope>Kernel</scope><name>featureSpaceNorm</name></member>
      <member refid="classKernel_1ae7ecba4a0a702141eba9ff29e24ea236" prot="public" virt="non-virtual"><scope>Kernel</scope><name>function</name></member>
      <member refid="classKernel_1aae7563927691a73b6f20b0194087c035" prot="public" virt="non-virtual"><scope>Kernel</scope><name>functionWithoutDim</name></member>
      <member refid="classKernel_1a126dcd1fa57f69af243ca678170288b6" prot="public" virt="non-virtual"><scope>Kernel</scope><name>generateMatrixH</name></member>
      <member refid="classKernel_1a32f8639c734692862062817efaeead64" prot="public" virt="non-virtual"><scope>Kernel</scope><name>generateMatrixHwithoutDim</name></member>
      <member refid="classKernel_1a5e398c63fee5f0e30b6dfb735c75e41a" prot="public" virt="non-virtual"><scope>Kernel</scope><name>getKernelMatrix</name></member>
      <member refid="classKernel_1a4dc45b11849fada00d52060cee27730b" prot="public" virt="non-virtual"><scope>Kernel</scope><name>getKernelMatrixPointer</name></member>
      <member refid="classKernel_1a838e2cc5018fa702e59c52a3bf8ef813" prot="public" virt="non-virtual"><scope>Kernel</scope><name>getParam</name></member>
      <member refid="classKernel_1a5a2cb0fce0eda6c67a2325f6c8958da8" prot="public" virt="non-virtual"><scope>Kernel</scope><name>getType</name></member>
      <member refid="classKernel_1a5f3eedf60637a672575c5c8623792481" prot="private" virt="non-virtual"><scope>Kernel</scope><name>H</name></member>
      <member refid="classKernel_1a6d2913d400e9ae537cf31ef56f58686e" prot="private" virt="non-virtual"><scope>Kernel</scope><name>HwithoutDim</name></member>
      <member refid="classKernel_1aab3d0d8ccef388d4ab78a8c5c93b1654" prot="private" virt="non-virtual"><scope>Kernel</scope><name>K</name></member>
      <member refid="classKernel_1ae60e072c58cdc16842a239bdd0761590" prot="public" virt="non-virtual"><scope>Kernel</scope><name>Kernel</name></member>
      <member refid="classKernel_1adf23c1567adb8ddb5757931587320871" prot="public" virt="non-virtual"><scope>Kernel</scope><name>Kernel</name></member>
      <member refid="classKernel_1a686e3cd96a93d7742226dedd5beb9da7" prot="public" virt="non-virtual"><scope>Kernel</scope><name>norm</name></member>
      <member refid="classKernel_1a7d5d259c98d94fa0a51d628144874135" prot="private" virt="non-virtual"><scope>Kernel</scope><name>param</name></member>
      <member refid="classKernel_1a3801cee0d86f25f1500d202f43a84b65" prot="public" virt="non-virtual"><scope>Kernel</scope><name>setKernelMatrix</name></member>
      <member refid="classKernel_1a60d2e4be6d2d2619377e677021178aa4" prot="public" virt="non-virtual"><scope>Kernel</scope><name>setParam</name></member>
      <member refid="classKernel_1ad01e209470accf44ea240078f39fb127" prot="public" virt="non-virtual"><scope>Kernel</scope><name>setType</name></member>
      <member refid="classKernel_1a36e782d6feb496fc25d252756b87c3d4" prot="private" virt="non-virtual"><scope>Kernel</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
